c = code
x = not supplied
d = documentation
m = compiler macro
n = no compiler macro required.
t = test

xd__ consp
xd__ atom
cdnt caar
cdnt cadr
cdnt cdar
cdnt cddr
cdnt caaar
cdnt caadr
cdnt cadar
cdnt caddr
cdnt cdaar
cdnt cdadr
cdnt cddar
cdnt cdddr
cdnt caaaar
cdnt caaadr
cdnt caadar
cdnt caaddr
cdnt cadaar
cdnt cadadr
cdnt caddar
cdnt cadddr
cdnt cdaaar
cdnt cdaadr
cdnt cdadar
cdnt cdaddr
c___ caar....
cd__ first, second, ...
cdnt copy-tree
cd_t sublis
cd_t nsublis
cdnt subst
cdnt subst-if
cdnt subst-if-not
c__t nsubst
c__t nsubst-if
c__t nsubst-if-not
c_mt tree-equal
cdnt copy-list
cdmt list
cdmt list*
cdnt list-length
xd__ listp
cdnt make-list
cdnt push
cdnt pop
cdnt nth
cdn_ (setf nth)
cdnt endp
cdn_ null
cd_t nconc
cdmt append
cdnt revappend
cdnt nreconc
cdnt butlast
cdnt nbutlast
cdnt last
cdnt ldiff
cdnt tailp
cdnt nthcdr
cdnt member
cdnt member-if
cdnt member-if-not
cdmt mapc
cdnt mapcar
cdnt mapcan
cdmt mapl
cdnt maplist
cdnt mapcon
cdnt acons
cdmt assoc
cdmt assoc-if
cdmt assoc-if-not
cdnt copy-alist
cdnt pairlis
cdmt rassoc
cdmt rassoc-if
cdmt rassoc-if-not
cdnt get-properties
cdnt getf
_d__ (setf getf)
c_nt remf
cdmt intersection
cdmt nintersection
cdmt adjoin
cd_t pushnew
cdmt set-difference
cdmt nset-difference
cdmt set-exclusive-or
cdmt nset-exclusive-or
cdmt subsetp
cdmt union
cdmt nunion
